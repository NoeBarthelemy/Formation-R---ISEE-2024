[
  {
    "objectID": "01_Cours_1_Les_bases.html#i.i---pourquoi-je-devrais-utiliser-r",
    "href": "01_Cours_1_Les_bases.html#i.i---pourquoi-je-devrais-utiliser-r",
    "title": "Formation R - Module 1 : Les bases",
    "section": "I.I - Pourquoi je devrais utiliser R ?",
    "text": "I.I - Pourquoi je devrais utiliser R ?\n\nR est gratuit et open source ! Vous pourrez donc l’utiliser partout, et il est personnalisable.\nLa communauté de R est GIGANTESQUE et experte. Donc, dès que vous avez un problème, vous trouverez une réponse sur internet.\nLes packages : Grâce à sa communauté, R bénéficie des milliers de packages, qui ajoutent des fonctionnalités spécifiques. On peut (presque) TOUT faire avec R.\nLa reproductibilité : Une analyse rigoureuse, c’est celle qu’on peut reproduire à l’identique, et modifier à l’envie. Grâce aux scripts, R permet cela.\nLa puissance : R est extrêmement puissant pour les calculs statistiques.\nVisualisation de Données : R excelle dans la création de graphiques et de visualisations de données de qualité professionnelle. Vous pouvez créer une grande variété de graphiques pour explorer et présenter vos résultats."
  },
  {
    "objectID": "01_Cours_1_Les_bases.html#i.ii---r-a-bien-des-inconvénients-non",
    "href": "01_Cours_1_Les_bases.html#i.ii---r-a-bien-des-inconvénients-non",
    "title": "Formation R - Module 1 : Les bases",
    "section": "I.II - R a bien des inconvénients, non ?",
    "text": "I.II - R a bien des inconvénients, non ?\n\nCourbe d’apprentissage : Pour les débutants, R peut avoir une courbe d’apprentissage abrupte, en particulier si vous n’avez pas d’expérience en programmation. Cependant, cela peut être surmonté avec la pratique et l’utilisation régulière (et en allant au bout de ce tutoriel !).\nInterface Utilisateur : Bien que R Studio facilite l’utilisation de R, certains débutants peuvent trouver l’interface un peu intimidante au début, surtout s’ils ne sont pas habitués à la programmation. Vous verrez qu’elle est finalement assez simple.\nDocumentation dispersée : La documentation de R est souvent disséminée à travers diverses sources en ligne, ce qui peut rendre la recherche d’informations spécifiques parfois un peu complexe. Mais au final, on s’en sors très bien, vous verrez !"
  },
  {
    "objectID": "01_Cours_1_Les_bases.html#i.iii---pourquoi-ne-pas-simplement-utiliser-excel",
    "href": "01_Cours_1_Les_bases.html#i.iii---pourquoi-ne-pas-simplement-utiliser-excel",
    "title": "Formation R - Module 1 : Les bases",
    "section": "I.III - Pourquoi ne pas simplement utiliser Excel ?",
    "text": "I.III - Pourquoi ne pas simplement utiliser Excel ?\nC’est la remarque standard ! En effet, Excel est un bel outil, puissant également, et abordable dans ses fonctions de base. Si vous n’utilisez Excel que pour copier coller quelques données et faire un tableau à l’occasion, vous n’avez probablement pas besoin de R. De plus, ces outils sont complémentaires, on ne les utilisera pas pour faire les mêmes choses.\nCependant, après quelques efforts à l’apprentissage, R vous permettra de faire bien plus de choses que Excel, de manière plus intuitive. En pratiquant l’analyse de données, vous atteindrez très vite vos limites avec Excel (à moins d’y passer des nuits entières). En revanche, la plupart des utilisateurs de R n’atteindront jamais de leur vie les limites de l’outil en termes de puissances et de créativité.\nAu final, vous ferez plus de choses, vous les ferez mieux, et plus rapidement.\nConvaincus ?"
  },
  {
    "objectID": "01_Cours_1_Les_bases.html#ii.i---créer-un-projet-rstudio",
    "href": "01_Cours_1_Les_bases.html#ii.i---créer-un-projet-rstudio",
    "title": "Formation R - Module 1 : Les bases",
    "section": "II.I - Créer un projet Rstudio",
    "text": "II.I - Créer un projet Rstudio\nSur Rstudio, on fonctionne avec des projets. Pourquoi ?\n\nOrganisation : Les projets permettent d’organiser vos fichiers, données et scripts au sein d’une structure cohérente, facilitant la gestion et la collaboration.\nIsolation : Chaque projet a son propre environnement, isolant les dépendances spécifiques du projet et évitant les conflits entre différents projets.\nGestion des fichiers : Les projets facilitent la gestion des fichiers en fournissant une vue globale du projet, permettant une navigation et une recherche plus aisées.\nReproductibilité : En utilisant des projets, vous assurez une reproductibilité plus facile en encapsulant tous les éléments nécessaires à votre analyse au sein d’un seul environnement.\nCollaboration : Les projets simplifient la collaboration en regroupant tous les éléments nécessaires et en facilitant le partage avec d’autres utilisateurs.\n\nPour en créer un, rien de plus facile :\n\nAllez dans Fichiers –&gt; Nouveau projet.\nChoisissez New directory (Nouveau dossier).\nChoisissez New project (Nouveau projet).\nDonnez lui un nom et choisissez où il sera stocké.\n\n\nMaintenant, il va falloir organiser vos fichiers correctement.\nA l’ISEE, nous avons une norme que vous devez respecter, et vous la trouverez dans cette fiche des bonnes pratiques avec R et R studio : Fiche des bonnes pratiques avec R et Rstudio – Pensez à la relire de temps en temps !\nEn résumé, le projet doit comporter 4 dossiers :\n\n01_code : Contient les scripts et autres fichiers directement liés au code.\n02_donnees : Contient les données, la bibliographie, les dictionnaires de variables, etc.\n03_exports : Tout ce qui est exporté du projet (Tableaux, figures, etc).\n04_rapports : Contient les rapports d’analyse du projet et les fichiers associés.\n\n\nAutre astuce : N’hésitez pas à fouiller dans les menus, notamment dans “Outils –&gt; Options de projet”.\nVous y trouverez plein de moyens de configurer votre projet à votre convenance.\n\nVotre projet est prêt ! Allons coder !"
  },
  {
    "objectID": "01_Cours_1_Les_bases.html#ii.ii---présentation-de-lenvironnement-rstudio",
    "href": "01_Cours_1_Les_bases.html#ii.ii---présentation-de-lenvironnement-rstudio",
    "title": "Formation R - Module 1 : Les bases",
    "section": "II.II - Présentation de l’environnement Rstudio :",
    "text": "II.II - Présentation de l’environnement Rstudio :\n\n\n\nVoici l’interface de Rstudio (crédit de l’image en suivant le lien)\n\n\n\nL’Éditeur pour éditer votre code, enregistré dans des fichiers\nLa Console pour exécuter des lignes de code, écrites ici ou depuis le fichier source ouvert dans l’éditeur\nL’Environnement : Les éléments/objets R que vous aurez créés lors de l’exécution du code. Et d’autres onglets dont la connexion à vos bases de données notamment.\nL’onglet Files (ou Fichiers) pour la navigation dans les dossiers, notamment celui de votre projet. Plots pour l’affichage de graphique selon votre utilisation de vos scripts. Packages (ou Paquets) pour la liste des packages déjà installés sur la machine. Help pour l’aide des fonctions. Viewer pour afficher le contenu de pages HTML créées dans vos scripts."
  },
  {
    "objectID": "01_Cours_1_Les_bases.html#iv.i---les-opérateurs",
    "href": "01_Cours_1_Les_bases.html#iv.i---les-opérateurs",
    "title": "Formation R - Module 1 : Les bases",
    "section": "IV.I - Les opérateurs",
    "text": "IV.I - Les opérateurs\nLes opérateurs de R ressemblent à ceux d’autres langages de programmation. Certains opérateurs arithmétiques comprennent :\n\n+ addition\n- soustraction\n* multiplication\n/ division\n^ exponentiation\n\nLes opérateurs logiques comprennent :\n\n&gt; supérieur à\n&gt;= supérieur ou égal à\n== strictement égal à\n!= non égal à\n\nEssayons ! Créez un chunk avec le bouton, ou en entrant le raccourci “ctrl + alt + i”.\nDans ce chunk, écrivez “1+2” et appuyez sur la flèche verte.\n\n1+2\n\n[1] 3\n\n\nVoila ! Le résultat s’affiche sous le chunk.\nSi on écris “1 == 2” on obtient “FALSE”. Ben oui, 1 n’est pas égal à 2.\n\n1 == 2 \n\n[1] FALSE\n\n# Dans les chunks, vous pouvez écrire des commentaires tant qu'ils sont précédés d'un #."
  },
  {
    "objectID": "01_Cours_1_Les_bases.html#iv.ii---les-variables",
    "href": "01_Cours_1_Les_bases.html#iv.ii---les-variables",
    "title": "Formation R - Module 1 : Les bases",
    "section": "IV.II - Les variables",
    "text": "IV.II - Les variables\nLes variables sont utilisées pour stocker des données. Leur valeur peut être modifiée, utilisée et manipulée selon les besoins.\nUn nom unique attribué à une variable (fonction ou objet également) est appelé identifiant.\nPour déclarer une variable, nous devons lui assigner un nom.\nPour ça on utilise l’opérateur &lt;- .\nEssayons !\n\nmy_variable &lt;- 10\n\n\nComment nommer les variables dans R ?\n\nConventions de nommage :\n\nUtilisez des noms descriptifs qui reflètent la nature de la variable.\nÉvitez d’utiliser des noms trop courts ou trop longs. Optez pour une longueur de nom qui offre une clarté suffisante sans être excessive.\n\nUtilisation de lettres minuscules :\n\nPréférez les lettres minuscules pour les noms de variables. Par exemple, utilisez my_variable plutôt que My_Variable.\n\nUtilisation de traits de soulignement :\n\nUtilisez des traits de soulignement (_) pour séparer les mots dans un nom de variable. Par exemple, my_variable.\n\nÉviter les noms réservés :\n\nÉvitez d’utiliser des noms qui sont déjà réservés pour des fonctions ou des objets en R.\nPar exemple, ne nommez pas une variable if ou mean, car ce sont des noms de fonctions intégrées.\n\nÉviter les caractères spéciaux :\n\nÉvitez d’utiliser des caractères spéciaux tels que $, %, ou & dans les noms de variable.\nCela peut causer des problèmes de lecture et d’interprétation.\n\nUtilisation de noms significatifs :\n\nChoisissez des noms qui ont un sens dans le contexte de votre programme.\nÉvitez les noms génériques comme temp ou x sauf s’ils sont appropriés pour une utilisation temporaire.\n\n\n\nMaintenant, créons une deuxième variable et additionnons la à la première.\n\nmy_variable2 &lt;- 10 \n\nmy_variable + my_variable2\n\n[1] 20\n\n\nOn peut stocker le résultat dans une nouvelle variable :\n\nTotal &lt;-  my_variable + my_variable2\n\n# Pour voir le contenu d’une variable, écrivez simplement son nom !\n\nTotal\n\n[1] 20"
  },
  {
    "objectID": "01_Cours_1_Les_bases.html#iv.iii---les-types-de-variables-et-dobjets",
    "href": "01_Cours_1_Les_bases.html#iv.iii---les-types-de-variables-et-dobjets",
    "title": "Formation R - Module 1 : Les bases",
    "section": "IV.III - Les types de variables et d’objets",
    "text": "IV.III - Les types de variables et d’objets\nLes types de variables et d’objets sur R, c’est super important. En les connaissant, vous comprendrez mieux vos données et ce que vous pouvez faire avec.\nPour connaitre le type d’une variable, tapez :\n\nclass(my_variable)\n\n[1] \"numeric\"\n\n\nEssayons d’autres formats de variables :\n\n# Variable de type \"character\" \n\nvariable_texte &lt;- \"Vive le vent d'hiver\"\nclass(variable_texte)\n\n[1] \"character\"\n\n\nR propose plusieurs types de variables, chacun ayant ses spécificités.\nVoici quelques-uns des types de variables couramment utilisés dans R :\n\nNumeric (numérique) :\n\n\nReprésente les nombres réels.\nExemple : `x &lt;- 42.5`.\n\n\nInteger (entier) :\n\n\nReprésente les nombres entiers.\nExemple : `y &lt;- 42L` (la lettre “L” indique que c’est un entier).\n\n\nCharacter (caractère) :\n\n\nReprésente des chaînes de caractères.\nExemple : `z &lt;- “Bonjour”`.\n\n\nLogical (logique) :\n\n\nReprésente des valeurs logiques (Vrai/Faux).\nExemple : `flag &lt;- TRUE`.\n\n\nFactor (facteur) :\n\n\nUtilisé pour représenter des variables catégorielles.\nExemple : `gender &lt;- factor(c(“Homme”, “Femme”, “Homme”))`.\n\n\nDate (date) :\n\n\nReprésente des dates.\nExemple : `dob &lt;- as.Date(“1990-01-01”)`.\n\n\nTime (heure) :\n\n\nReprésente des heures.\nExemple : `timestamp &lt;- as.POSIXct(“2023-01-01 12:30:00”)`.\n\nChaque type de variable a ses propres opérations et méthodes spécifiques. Par exemple, les opérations arithmétiques sont généralement utilisées avec des variables numériques, tandis que les opérations logiques sont utilisées avec des variables logiques.\nIl est important de comprendre les types de variables car cela affecte la manière dont les données sont stockées en mémoire et la manière dont les opérations sont effectuées.\nPar exemple, tapez “my_variable + variable_texte” dans un chunk et exécutez-le.\n\nHé oui, on ne peut pas additionner une variable numérique avec une variable non numérique !"
  },
  {
    "objectID": "01_Cours_1_Les_bases.html#iv.iv---les-vecteurs",
    "href": "01_Cours_1_Les_bases.html#iv.iv---les-vecteurs",
    "title": "Formation R - Module 1 : Les bases",
    "section": "IV.IV - Les vecteurs",
    "text": "IV.IV - Les vecteurs\nAaaah … les vecteurs. Il peut être compliqué de comprendre leur intérêt et leur nature, alors allons y pas à pas :\nImaginez que vous ayez une boîte dans laquelle vous voulez stocker plusieurs valeurs, comme des nombres. Cette boîte est votre vecteur.\n\nStockage ordonné : Un vecteur vous permet de stocker plusieurs valeurs de manière ordonnée. Par exemple, vous pouvez avoir un vecteur de notes pour chaque élève dans une classe.\n\n# Exemple de vecteur de notes\nnotes &lt;- c(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20)\n\nAccès facile aux éléments : Comme les éléments sont stockés de manière ordonnée, vous pouvez facilement accéder à chaque note en utilisant sa position dans le vecteur. Par exemple, la première note est à la position 1, la deuxième à la position 2, et ainsi de suite.\n\n#Afficher le 15ème élément grâce aux crochets.\nnotes[15]\n\n[1] 14\n\n\nOpérations sur l’ensemble : Vous pouvez effectuer des opérations sur l’ensemble des notes en une seule fois. Par exemple, vous pourriez vouloir calculer la moyenne de toutes les notes. Avec un vecteur, cela se fait facilement.\n\n# Crééons un autre vecteur de notes. La distribution de ces notes sera \"normale\" (au sens statistique), grâce à la fonction runif() et la définition de quelques paramètres.\n# Prenons 150 notes\n\n# Définir les paramètres\nn &lt;- 150                # Nombre d'observations\nborne_inf &lt;- 0          # La note minimale c'est 0\nborne_sup &lt;- 20         # La note maximale c'est 20\nmoyenne_val &lt;- 12.5     # Moyenne des notes\necart_type_val &lt;- 9     # Écart type\n\n# Générer un échantillon aléatoire\nuniforme_aleatoire &lt;- runif(n)\nechantillon_aleatoire &lt;- moyenne_val + ecart_type_val * qnorm(uniforme_aleatoire)\n\n# Tronquer les valeurs pour qu'elles soient dans la plage spécifiée\nechantillon_aleatoire &lt;- pmax(pmin(echantillon_aleatoire, borne_sup), borne_inf)\n\n# Calcul de la moyenne des notes\nmoyenne_echantillon &lt;- mean(echantillon_aleatoire)\nmoyenne_echantillon\n\n[1] 12.47393\n\n\nLe vecteur permet de traiter l’ensemble des données d’un coup, ce qui simplifie les calculs.\nFacilité de manipulation : Vous pouvez ajouter, supprimer ou modifier des notes dans votre vecteur en fonction de l’évolution des données.\n\n# Ajout d'une nouvelle note \nnotes &lt;- c(notes, 19)\n\n\nLe vecteur offre une flexibilité pour gérer dynamiquement les données.\nEn résumé, un vecteur en R est comme une boîte qui vous permet de stocker et d’organiser des données de manière ordonnée, avec la possibilité d’accéder facilement à chaque élément, de réaliser des opérations sur l’ensemble et de manipuler les données de manière souple. C’est un outil puissant pour travailler avec des ensembles de données dans R."
  },
  {
    "objectID": "01_Cours_1_Les_bases.html#v.i---r-le-couteau-suisse-de-la-statistique",
    "href": "01_Cours_1_Les_bases.html#v.i---r-le-couteau-suisse-de-la-statistique",
    "title": "Formation R - Module 1 : Les bases",
    "section": "V.I - R, le couteau suisse de la statistique",
    "text": "V.I - R, le couteau suisse de la statistique\nLes packages R sont des modules complémentaires qui ajoutent des fonctionnalités à R. Ces package sont crées par la communauté de R, qui les partage alors gratuitement. Souvent, un package répond aux besoins d’un domaine précis. Par exemple :\n\ndplyr : Manipulation de données. Offre des fonctions simples et cohérentes pour filtrer, trier et agréger des données.\nggplot2 : Visualisation de données. Permet de créer des graphiques élégants et hautement personnalisables.\ntidyr : Facilite la manipulation et la transformation de données en suivant les principes de la “tidy data”.\ncaret : Facilite l’entraînement de modèles prédictifs en fournissant une interface unifiée pour différents algorithmes.\nrandomForest : Machine Learning. Implémente l’algorithme Random Forest pour la classification et la régression.\nshiny : Permet de créer des applications web interactives directement à partir de R.\nlubridate : Manipulation de dates. Simplifie la manipulation et le traitement des objets de date et d’heure.\nmagrittr : Opérateurs pipe (%&gt;%). Facilite la composition de fonctions en utilisant des opérateurs pipe pour améliorer la lisibilité du code.\nstringr : Manipulation de chaînes de caractères. Fournit des fonctions pour travailler efficacement avec des chaînes de caractères.\ntidyverse : LE MEILLEUR PACKAGE. Regroupe plusieurs packages, dont dplyr, ggplot2, tidyr, etc., pour faciliter l’analyse de données en suivant les principes de “tidy data”. Ce package (merci Hadley Wickham) est incontournable et a rendu R bien plus facile à utiliser qu’auparavant.\n\nCe sont des exemples, parmi les 20 248 packages disponibles en 2023. Chaque package apporte son lot de fonctions. Ensemble, ils permettent à R d’effectuer quasiment tout type d’analyse, de la génétique des populations à la cartographie, en passant par la finance internationale.\nLes trois plateformes pour trouver des packages sont :\n\nCRAN - The Comprehensive R Archive Network\nBioconductor - Open source software for Bioinformatics\nGithub\n\nIl est important de noter que les packages ne sont généralement pas indépendants et peuvent dépendre d’autres packages pour certaines fonctionnalités, créant ainsi un réseau de dépendances entre eux."
  },
  {
    "objectID": "01_Cours_1_Les_bases.html#v.ii---télécharger-en-installer-un-package",
    "href": "01_Cours_1_Les_bases.html#v.ii---télécharger-en-installer-un-package",
    "title": "Formation R - Module 1 : Les bases",
    "section": "V.II - Télécharger en installer un package",
    "text": "V.II - Télécharger en installer un package\nUn package s’installe très simplement :\n\ninstall.packages(\"ggplot2\")\n\nOn peut aussi les gérer par l’onglet “Packages” du panneau en bas à droite de Rstudio.\nGérer les packages, c’est parfois (souvent) des prises de tête, alors, à l’ISEE, on fait le travail pour vous ! De fait, vous ne pouvez pas installer vos propres packages, il faudra passer par votre référent R (moi en 2024)."
  },
  {
    "objectID": "01_Cours_1_Les_bases.html#v.iii---en-savoir-plus-sur-le-contenu-dun-package",
    "href": "01_Cours_1_Les_bases.html#v.iii---en-savoir-plus-sur-le-contenu-dun-package",
    "title": "Formation R - Module 1 : Les bases",
    "section": "V.III - En savoir plus sur le contenu d’un package",
    "text": "V.III - En savoir plus sur le contenu d’un package\nPour en savoir plus sur un package, obtenir la liste des fonctions, des exemples d’usage etc, il suffit de taper “?nomdupackage” dans la console.\nOu alors, on peut taper son nom dans la barre de recherche de l’onglet packages.\nPar exemple :\n\n?DBI\n\nAucune documentation pour 'DBI' n'a été trouvée dans les packages et les bibliothèques :\nvous pourriez essayer '??DBI'\n\n\nPour une fonction, c’est la même chose !\n\n?rnorm\n\ndémarrage du serveur d'aide httpd ... fini"
  },
  {
    "objectID": "01_Cours_1_Les_bases.html#v.iv---charger-les-packages",
    "href": "01_Cours_1_Les_bases.html#v.iv---charger-les-packages",
    "title": "Formation R - Module 1 : Les bases",
    "section": "V.IV - Charger les packages",
    "text": "V.IV - Charger les packages\nQuand on écrit son script, on commence toujours par un chunk de chargement des packages. Comme on fait son sac pour aller au travail, on sélectionne ici tous les bons outils avant de démarrer. Si on doit en rajouter un plus tard, on le fera.\nOn charge toujours les packages avec la fonction library.\nPar exemple :\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.2     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.3     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(ggplot2)\nlibrary(raster)\n\nLe chargement a nécessité le package : sp\nThe legacy packages maptools, rgdal, and rgeos, underpinning the sp package,\nwhich was just loaded, will retire in October 2023.\nPlease refer to R-spatial evolution reports for details, especially\nhttps://r-spatial.org/r/2023/05/15/evolution4.html.\nIt may be desirable to make the sf package available;\npackage maintainers should consider adding sf to Suggests:.\nThe sp package is now running under evolution status 2\n     (status 2 uses the sf package in place of rgdal)\n\nAttachement du package : 'raster'\n\nL'objet suivant est masqué depuis 'package:dplyr':\n\n    select\n\n# etc ...\n\nSi vous oubliez de le faire, vous n’aurez tout simplement pas accès aux fonctions du package !"
  },
  {
    "objectID": "02_Cours_2_Analyser_le_RP.html",
    "href": "02_Cours_2_Analyser_le_RP.html",
    "title": "Formation R - Module 2 : Analyse du RP",
    "section": "",
    "text": "Ce cours à pour but de vous montrer à quoi une simple analyse peut ressembler sous R, la manière dont on structure son script. Ne vous en faîtes pas si certains détails vous échappent, le but ici est de s’imprégner de la méthode de travail, et s’habituer à lire un peu de code. Travailler avec R demande de la pratique, une capacité à apprendre et une bonne dose de curiosité. Petit à petit, vous apprendrez à manipuler les données, les visualiser, les analyser.\nBref. Ici, nous allons étudier le jeu de données OPEN DATA du RP 2019.\nJ’ai décrit ce jeu de données ici : RP2019 - OPEN DATA"
  },
  {
    "objectID": "02_Cours_2_Analyser_le_RP.html#connexion-à-la-db-recensement-2019",
    "href": "02_Cours_2_Analyser_le_RP.html#connexion-à-la-db-recensement-2019",
    "title": "Formation R - Module 2 : Analyse du RP",
    "section": "1) Connexion à la DB recensement 2019",
    "text": "1) Connexion à la DB recensement 2019\nPour ça, on va avoir besoin de SQL. Ça tombe bien, j’ai fait un cours pour utiliser SQL depuis R ! : Cours N°6 : SQL & R\nCommençons par créer notre connexion.\n\nRP2019_con &lt;- dbConnect(odbc(), \n                        Driver = \"SQL Server\", \n                        Server = \"sql-data\\\\source\", \n                        Database = \"recensement\",\n                        Trusted_Connection = \"True\") \n# La trusted connection fonctionne car vous êtes déjà authentifié sur votre session windows :) \n\nGénial, nous voila connectés."
  },
  {
    "objectID": "02_Cours_2_Analyser_le_RP.html#extraire-les-variables-dintérêt",
    "href": "02_Cours_2_Analyser_le_RP.html#extraire-les-variables-dintérêt",
    "title": "Formation R - Module 2 : Analyse du RP",
    "section": "2) Extraire les variables d’intérêt",
    "text": "2) Extraire les variables d’intérêt\nReste à extraire les données individuelles de 2019, pour les variables dont on a besoin : Pays de naissance (code + libellé), commune de naissance.\n\nRP2019_DB_individus &lt;- RP2019_con %&gt;% \n  tbl(in_schema(\"2019\", \"individus\")) %&gt;% \n  # Puis on pipe une action, ici la fonction select, \n  # comme on le ferait sur n'importe quel jeu de données. \n  select(., CNAT, CPAYSN, ILN, NAT) \n\nIl ne nous reste plus qu’à manipuler nos données.\n\nView(RP2019_DB_individus)\n\nnrow(RP2019_DB_individus)\n\n[1] NA\n\nRP2019_DB_individus$CNAT\n\nNULL"
  },
  {
    "objectID": "03_Cours_3_Rmarkdown.html",
    "href": "03_Cours_3_Rmarkdown.html",
    "title": "Formation R - Module 3 : Rmarkdown",
    "section": "",
    "text": "R Markdown est un outil puissant pour la création de documents dynamiques qui combinent du texte formaté avec des analyses de données en utilisant le langage de programmation R. Il possède une syntaxe de formatage simple pour la rédaction de documents HTML, PDF et Microsoft Word. Pour plus de détails sur l’utilisation de R Markdown, consultez http://rmarkdown.rstudio.com.\nEn fait, vous verrez que Markdown vous permettra de réaliser des scripts plus beaux, mieux ordonnés, et dans lesquels vos idées, vos commentaires et votre code ne feront qu’un. Ce genre de script faciliteront ENORMEMENT le travail de vos relecteurs, mais également le vôtre !\nDans ce tutoriel, nous allons explorer les fonctionnalités de base de R Markdown en créant un document pas à pas.\nPS: Ce document provient d’un R markdown !"
  },
  {
    "objectID": "03_Cours_3_Rmarkdown.html#quest-ce-que-r-markdown",
    "href": "03_Cours_3_Rmarkdown.html#quest-ce-que-r-markdown",
    "title": "Formation R - Module 3 : Rmarkdown",
    "section": "",
    "text": "R Markdown est un outil puissant pour la création de documents dynamiques qui combinent du texte formaté avec des analyses de données en utilisant le langage de programmation R. Il possède une syntaxe de formatage simple pour la rédaction de documents HTML, PDF et Microsoft Word. Pour plus de détails sur l’utilisation de R Markdown, consultez http://rmarkdown.rstudio.com.\nEn fait, vous verrez que Markdown vous permettra de réaliser des scripts plus beaux, mieux ordonnés, et dans lesquels vos idées, vos commentaires et votre code ne feront qu’un. Ce genre de script faciliteront ENORMEMENT le travail de vos relecteurs, mais également le vôtre !\nDans ce tutoriel, nous allons explorer les fonctionnalités de base de R Markdown en créant un document pas à pas.\nPS: Ce document provient d’un R markdown !"
  },
  {
    "objectID": "03_Cours_3_Rmarkdown.html#les-chunks",
    "href": "03_Cours_3_Rmarkdown.html#les-chunks",
    "title": "Formation R - Module 3 : Rmarkdown",
    "section": "1) Les chunks",
    "text": "1) Les chunks\nDans R markdownk, les commentaires n’ont pas besoin d’être précédés d’un #. En fait, c’est plutôt l’inverse, car c’est le code qui devra être encapsulé dans ce qu’on appelle des “chunks”.\nInsérons un chunk avec le raccourci ctrl + alt + i , ou alors avec le bouton vert ci-dessus à droite.\n\n# Le chunk est un espace est réservé au code. Ici, je dois donc à nouveau précéder \n# mes commentaires d'un #.\n\n# Charger le jeu de données 'iris' intégré à R\ndata(iris)\n\nNotez que le chunk démarre par un {r}. Nous codons en R ! Remplacez ce {r} par {SQL}, et vous pourrez lancer une requête SQL depuis le même script ! Pas mal non ?"
  },
  {
    "objectID": "03_Cours_3_Rmarkdown.html#intégrer-des-graphiques",
    "href": "03_Cours_3_Rmarkdown.html#intégrer-des-graphiques",
    "title": "Formation R - Module 3 : Rmarkdown",
    "section": "2) Intégrer des graphiques",
    "text": "2) Intégrer des graphiques\nMaintenant, explorons ce jeu de données :\n\n\n\n\n\nNotez que le paramètre ‘echo = FALSE’ a été ajouté au chunk pour empêcher l’affichage du code R qui a généré le graphique. Ainsi, dans le script, on aura seulement le graphique. Faites la même chose pour les autres chunks que vous ne voulez pas afficher !\nVoilà ce que ça donne si on affiche le code :\n\nlibrary(ggplot2)\ntheme_set(theme_classic())\n\n# Plot\ng &lt;- ggplot(iris, aes(Petal.Length))\ng + geom_density(aes(fill=factor(Species)), alpha=0.8) + \n    labs(title=\"Graphique de densité\", \n         subtitle=\"Longueur des pétales groupée par espèce de fleur\",\n         caption=\"Source : iris\",\n         x=\"Longueur des pétales\",\n         fill=\"Espèce de fleur\")\n\n\n\n\nOu encore :\n\n# Créer la donnée\nx &lt;- seq(0, 2*pi, length.out=100)\ndata &lt;- data.frame(\n  x=x, \n  y=sin(x) + rnorm(100, sd=0.2)\n)\n \n# Ajouter une colonne avec un condition pour choisir la couleur\ndata &lt;- data %&gt;% \n  mutate(mycolor = ifelse(y&gt;0, \"type1\", \"type2\"))\n \n# plot\nggplot(data, aes(x=x, y=y)) +\n  geom_segment( aes(x=x, xend=x, y=0, yend=y, color=mycolor), size=1.3, alpha=0.9) +\n  theme_light() +\n  theme(\n    legend.position = \"none\",\n    panel.border = element_blank(),\n  ) +\n  xlab(\"\") +\n  ylab(\"Value of Y\")\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\n\n\n\n\nCe chunk est long ! Vous pouvez exécuter l’ensemble du code contenu dans un chunk à l’aide du raccourci clavier Ctrl+Entrée"
  },
  {
    "objectID": "03_Cours_3_Rmarkdown.html#quelques-astuces-de-formatage.",
    "href": "03_Cours_3_Rmarkdown.html#quelques-astuces-de-formatage.",
    "title": "Formation R - Module 3 : Rmarkdown",
    "section": "3) Quelques astuces de formatage.",
    "text": "3) Quelques astuces de formatage.\nITALIQUE : Je peux mettre mon texte en italique en l’entourant de une seule étoile * Texte à afficher en italique * (sans les espaces).\nGRAS : Je peux mettre mon texte en gras en l’entourant de deux étoiles ** Texte à afficher en gras ** (sans les espaces).\nSaut de ligne : Je peux insérer un saut à la ligne avec la balise &lt;br&gt;."
  },
  {
    "objectID": "03_Cours_3_Rmarkdown.html#lexport-pour-quoi-faire",
    "href": "03_Cours_3_Rmarkdown.html#lexport-pour-quoi-faire",
    "title": "Formation R - Module 3 : Rmarkdown",
    "section": "1) L’export, pour quoi faire ?",
    "text": "1) L’export, pour quoi faire ?\nLa magie de R markdown, c’est l’export ! En exportant votre script (comme je l’ai fait ici), vous obtenez un PDF qu’il sera facile de partager avec les collègues. Vous pourrez leur afficher des figures, des tableaux, etc.  Si des modifications doivent être faites, pas besoin d’exporter une figure, la copier dans word, etc. Vous avez juste à venir changer votre ligne de code dans le script et retricoter !"
  },
  {
    "objectID": "03_Cours_3_Rmarkdown.html#problèmes-techniques-fréquents-lors-de-lexport",
    "href": "03_Cours_3_Rmarkdown.html#problèmes-techniques-fréquents-lors-de-lexport",
    "title": "Formation R - Module 3 : Rmarkdown",
    "section": "2) Problèmes techniques fréquents lors de l’export",
    "text": "2) Problèmes techniques fréquents lors de l’export\nPour exporter au format PDF vous aurez besoin de :\n\nLaTeX (un langage et un système de composition de documents qui permet d’avoir des rendus super propres) Normalement, TexWorks (MikTeX) est installé sur votre poste. Sinon, ouvrez un ticket.\nLe package “tinytex” (Normalement installé, sinon ticket)\n\nAvec une nouvelle installation de MiKTeX, de nombreux fichiers de style nécessaires pour “KNIT” (tricoter) un fichier RMarkdown en PDF ne sont pas installés. Pour permettre à MiKTeX de les installer automatiquement, ouvrez la console MiKTeX et allez dans l’onglet Paramètres (settings).\nIl y a une option qui dit “You can choose whether missing packages are to be installed automatically (on-the-fly)”. Assurez-vous !que cette option est réglée sur “Always” pour permettre l’installation des fichiers de style nécessaires."
  },
  {
    "objectID": "03_Cours_3_Rmarkdown.html#personnaliser-son-export",
    "href": "03_Cours_3_Rmarkdown.html#personnaliser-son-export",
    "title": "Formation R - Module 3 : Rmarkdown",
    "section": "3) Personnaliser son export",
    "text": "3) Personnaliser son export\nLa personnalisation du document généré peut être réalisée en ajustant les options dans le préambule du document. Cependant, RStudio propose également une interface graphique simplifiée pour modifier ces options.\nPour y accéder, cliquez sur l’icône en forme d’engrenage située à droite du bouton “Knit” et sélectionnez “Output Options…” dans le menu déroulant.\nPersonnellement, j’aime ajouter une table des matières."
  },
  {
    "objectID": "03_Cours_3_Rmarkdown.html#exportons",
    "href": "03_Cours_3_Rmarkdown.html#exportons",
    "title": "Formation R - Module 3 : Rmarkdown",
    "section": "4) Exportons",
    "text": "4) Exportons\nDans R studio, cliquez simplement sur la flèche noire à droite du bouton “Knit” ci-dessus (la pelotte de laine!). Choisissez le format (essayons un PDF).\nVoilà, vous n’avez plus qu’à admirer votre document :)\nJ’espère que ce tutoriel vous auras été utile.\nBon code !"
  },
  {
    "objectID": "05_Cours_5_DataViz.html",
    "href": "05_Cours_5_DataViz.html",
    "title": "La visualisation de données avec R",
    "section": "",
    "text": "I) Introduction"
  },
  {
    "objectID": "06_Cours_6_SQL_et_R.html",
    "href": "06_Cours_6_SQL_et_R.html",
    "title": "Utiliser SQL dans R",
    "section": "",
    "text": "SQL c’est bien. R aussi. Pourquoi ne pas utiliser les deux en un seul endroit ? Ici, je vous montre 3 méthodes pour utiliser SQL au sein de vos scripts dans Rstudio.\nJe vous recommande la troisième méthode, qui permet d’utiliser dplyr directement sur une table d’une base de données :\ndplyr, vous le savez surement, est une bibliothèque R qui offre une syntaxe cohérente et conviviale pour la manipulation de données, indépendamment de la source (cadres de données R, bases de données, etc.). Elle rend les opérations de manipulation de données plus simples et plus lisibles. Autrement dit, dplyr permet de travailler de manière similaire sur différentes sources de données, qu’il s’agisse de dataframes R, de bases de données ou d’autres sources. Cela peut faciliter le travail sur différentes plates-formes sans avoir à se soucier des différences de syntaxe SQL spécifiques à chaque système de gestion de base de données.\n\nPourquoi ça me concerne ?\nPour les utilisateurs habitués à R, l’utilisation de dplyr offre une syntaxe plus familière et intuitive que le SQL. Vous pourrez ainsi regrouper l’entiereté de votre analyse en un seul script et la commenter, puis en faire un Rmarkdown ou un PDF. Cela facilitera significativement la collaboration avec vos collègues de l’ISEE ou d’ailleurs, et rendre votre travail reproductible et transparent !"
  },
  {
    "objectID": "06_Cours_6_SQL_et_R.html#créer-une-bdd-sql-dans-r",
    "href": "06_Cours_6_SQL_et_R.html#créer-une-bdd-sql-dans-r",
    "title": "Utiliser SQL dans R",
    "section": "1) Créer une BDD SQL dans R",
    "text": "1) Créer une BDD SQL dans R\nIl y a plusieurs façons d’utiliser SQL dans R.\nNous allons d’abord utiliser une manière assez directe. Pour cela, il nous faut des données. Prenons le jeu de données ‘mtcars’ intégré à R.\nEn R, on peut déjà observer ce jeu de données :\n\ndata(\"mtcars\")\nhead(mtcars)\n\n                   mpg cyl disp  hp drat    wt  qsec vs am gear carb\nMazda RX4         21.0   6  160 110 3.90 2.620 16.46  0  1    4    4\nMazda RX4 Wag     21.0   6  160 110 3.90 2.875 17.02  0  1    4    4\nDatsun 710        22.8   4  108  93 3.85 2.320 18.61  1  1    4    1\nHornet 4 Drive    21.4   6  258 110 3.08 3.215 19.44  1  0    3    1\nHornet Sportabout 18.7   8  360 175 3.15 3.440 17.02  0  0    3    2\nValiant           18.1   6  225 105 2.76 3.460 20.22  1  0    3    1\n\nmtcars_modif &lt;- mtcars\nmtcars_modif$`car name` &lt;- rownames(mtcars_modif)  \n# Créer une nouvelle colonne pour les noms des voitures\n\n\n\nR: Motor Trend Car Road Tests\n\n\n\n\n\n\n\n\n\n\n\n\nmtcars\nR Documentation\n\n\n\n\nMotor Trend Car Road Tests\n\nDescription\nThe data was extracted from the 1974 Motor Trend US magazine, and comprises fuel consumption and 10 aspects of automobile design and performance for 32 automobiles (1973–74 models).\n\n\nUsage\nmtcars\n\n\nFormat\nA data frame with 32 observations on 11 (numeric) variables.\n\n\n\n[, 1]\nmpg\nMiles/(US) gallon\n\n\n[, 2]\ncyl\nNumber of cylinders\n\n\n[, 3]\ndisp\nDisplacement (cu.in.)\n\n\n[, 4]\nhp\nGross horsepower\n\n\n[, 5]\ndrat\nRear axle ratio\n\n\n[, 6]\nwt\nWeight (1000 lbs)\n\n\n[, 7]\nqsec\n1/4 mile time\n\n\n[, 8]\nvs\nEngine (0 = V-shaped, 1 = straight)\n\n\n[, 9]\nam\nTransmission (0 = automatic, 1 = manual)\n\n\n[,10]\ngear\nNumber of forward gears\n\n\n[,11]\ncarb\nNumber of carburetors\n\n\n\n\n\n\n\n\nNote\n\nHenderson and Velleman (1981) comment in a footnote to Table 1:\n‘Hocking [original transcriber]'s noncrucial coding of the\nMazda's rotary engine as a straight six-cylinder engine and the\nPorsche's flat engine as a V engine, as well as the inclusion of the\ndiesel Mercedes 240D, have been retained to enable direct comparisons\nto be made with previous analyses.’\n\n\n\nSource\n\nHenderson and Velleman (1981),\nBuilding multiple regression models interactively.\nBiometrics, 37, 391–411.\n\n\n\nExamples\n\nrequire(graphics)\npairs(mtcars, main = \"mtcars data\", gap = 1/4)\ncoplot(mpg ~ disp | as.factor(cyl), data = mtcars,\n       panel = panel.smooth, rows = 1)\n## possibly more meaningful, e.g., for summary() or bivariate plots:\nmtcars2 &lt;- within(mtcars, {\n   vs &lt;- factor(vs, labels = c(\"V\", \"S\"))\n   am &lt;- factor(am, labels = c(\"automatic\", \"manual\"))\n   cyl  &lt;- ordered(cyl)\n   gear &lt;- ordered(gear)\n   carb &lt;- ordered(carb)\n})\nsummary(mtcars2)"
  },
  {
    "objectID": "06_Cours_6_SQL_et_R.html#mtcars",
    "href": "06_Cours_6_SQL_et_R.html#mtcars",
    "title": "Utiliser SQL dans R",
    "section": "Motor Trend Car Road Tests",
    "text": "Motor Trend Car Road Tests\n\nDescription\nThe data was extracted from the 1974 Motor Trend US magazine, and comprises fuel consumption and 10 aspects of automobile design and performance for 32 automobiles (1973–74 models).\n\n\nUsage\nmtcars\n\n\nFormat\nA data frame with 32 observations on 11 (numeric) variables.\n\n\n\n[, 1]\nmpg\nMiles/(US) gallon\n\n\n[, 2]\ncyl\nNumber of cylinders\n\n\n[, 3]\ndisp\nDisplacement (cu.in.)\n\n\n[, 4]\nhp\nGross horsepower\n\n\n[, 5]\ndrat\nRear axle ratio\n\n\n[, 6]\nwt\nWeight (1000 lbs)\n\n\n[, 7]\nqsec\n1/4 mile time\n\n\n[, 8]\nvs\nEngine (0 = V-shaped, 1 = straight)\n\n\n[, 9]\nam\nTransmission (0 = automatic, 1 = manual)\n\n\n[,10]\ngear\nNumber of forward gears\n\n\n[,11]\ncarb\nNumber of carburetors\n\n\n\n\n\n\n\n\nNote\n\nHenderson and Velleman (1981) comment in a footnote to Table 1:\n‘Hocking [original transcriber]'s noncrucial coding of the\nMazda's rotary engine as a straight six-cylinder engine and the\nPorsche's flat engine as a V engine, as well as the inclusion of the\ndiesel Mercedes 240D, have been retained to enable direct comparisons\nto be made with previous analyses.’\n\n\n\nSource\n\nHenderson and Velleman (1981),\nBuilding multiple regression models interactively.\nBiometrics, 37, 391–411.\n\n\n\nExamples\n\nrequire(graphics)\npairs(mtcars, main = \"mtcars data\", gap = 1/4)\ncoplot(mpg ~ disp | as.factor(cyl), data = mtcars,\n       panel = panel.smooth, rows = 1)\n## possibly more meaningful, e.g., for summary() or bivariate plots:\nmtcars2 &lt;- within(mtcars, {\n   vs &lt;- factor(vs, labels = c(\"V\", \"S\"))\n   am &lt;- factor(am, labels = c(\"automatic\", \"manual\"))\n   cyl  &lt;- ordered(cyl)\n   gear &lt;- ordered(gear)\n   carb &lt;- ordered(carb)\n})\nsummary(mtcars2)"
  },
  {
    "objectID": "06_Cours_6_SQL_et_R.html#effectuer-une-requête-sql-dans-r-à-laide-dun-chunk-dédié.",
    "href": "06_Cours_6_SQL_et_R.html#effectuer-une-requête-sql-dans-r-à-laide-dun-chunk-dédié.",
    "title": "Utiliser SQL dans R",
    "section": "2) Effectuer une requête SQL dans R à l’aide d’un chunk dédié.",
    "text": "2) Effectuer une requête SQL dans R à l’aide d’un chunk dédié.\nBien, il est temps d’effectuer notre première requête !\nLe language de la requête est SQL, mais on utilise la fonction dbGetQuery() du package DBI pour faire notre requête. Le chunk reste donc en language R.\nVous pouvez donc simplement copier la requête SQL qui vous a demandé tant d’efforts !\n\nmt_cars_df &lt;- dbGetQuery(con, \"\nSELECT *\nFROM mtcars\nWHERE hp &gt; 150 AND mpg &lt; 18\n\")\n\nVoilà, c’est tout simple ! A vous de complexifier vos requêtes, et de découvrir les possibilités offertes par ce package."
  },
  {
    "objectID": "06_Cours_6_SQL_et_R.html#analyser-les-données-de-la-requête",
    "href": "06_Cours_6_SQL_et_R.html#analyser-les-données-de-la-requête",
    "title": "Utiliser SQL dans R",
    "section": "3) Analyser les données de la requête",
    "text": "3) Analyser les données de la requête\nMaitenant, on repasse en R !\nEt on utilise le résultat de notre requête pour faire un petit graphique !\n\ntheme_set(theme_bw())  \n\n# Préparation des données\nmt_cars_df$mpg_z &lt;- round((mt_cars_df$mpg - mean(mt_cars_df$mpg))/sd(mt_cars_df$mpg), 2)  \n# Calculer la consommation de carburant normalisée\nmt_cars_df$mpg_type &lt;- ifelse(mt_cars_df$mpg_z &lt; 0, \"en dessous\", \"au-dessus\")  \n# Indicateur au-dessus/en dessous de la moyenne\nmt_cars_df &lt;- mt_cars_df[order(mt_cars_df$mpg_z), ]  # Trier\nmt_cars_df$`car name` &lt;- factor(mt_cars_df$`car name`, levels = mt_cars_df$`car name`)  \n# Convertir en facteur pour conserver l'ordre trié dans le graphique.\n\n# Diagrammes en barres divergents\nggplot(mt_cars_df, aes(x=`car name`, y=mpg_z, label=mpg_z)) + \n  geom_bar(stat='identity', aes(fill=mpg_type), width=.5)  +\n  scale_fill_manual(name=\"Consommation\", \n                    labels = c(\"Au-dessus de la moyenne\", \"En dessous de la moyenne\"), \n                    values = c(\"au-dessus\"=\"#00ba38\", \"en dessous\"=\"#f8766d\")) + \n  labs(subtitle=\"Consommation normalisée de 'mtcars'\", \n       title= \"Diagrammes en barres divergents\") + \n  coord_flip()\n\n\n\n\nIci, j’utilise ggplot2 pour créer un graphique en barres divergentes, en mettant en évidence les voitures ayant une consommation de carburant supérieure et inférieure à la moyenne.\nLe graphique présente les noms des voitures sur l’axe des x et la consommation de carburant normalisée sur l’axe des y. Les barres sont colorées en fonction de la consommation de carburant par rapport à la moyenne.\nLe graphique est affiché en orientation horizontale (coord_flip()) pour une meilleure lisibilité des noms des voitures."
  },
  {
    "objectID": "06_Cours_6_SQL_et_R.html#effectuer-une-requête-sql-dans-r-à-laide-dun-chunk-dédié.-1",
    "href": "06_Cours_6_SQL_et_R.html#effectuer-une-requête-sql-dans-r-à-laide-dun-chunk-dédié.-1",
    "title": "Utiliser SQL dans R",
    "section": "1) Effectuer une requête SQL dans R à l’aide d’un chunk dédié.",
    "text": "1) Effectuer une requête SQL dans R à l’aide d’un chunk dédié.\nInsérons un chunk sql et sélectionnons les voitures à plus de 150 chevaux et consommant moins de 18 gallons par mile.\n\n  SELECT *\n  FROM mtcars\n  WHERE hp &gt; 150 AND mpg &lt; 18\n\nDans l’entête de ce chunk à la place de {r} j’ai mis : {sql, connection=con, output.var = “mt_cars_df_2”}\nNotez que la connection à été faite avec “connection = con”, et que le résultat de la requête à été stocké dans “mt_cars_df_2”, directement dans R studio !"
  },
  {
    "objectID": "06_Cours_6_SQL_et_R.html#analyser",
    "href": "06_Cours_6_SQL_et_R.html#analyser",
    "title": "Utiliser SQL dans R",
    "section": "2) Analyser",
    "text": "2) Analyser\nTout comme avant, on peut analyser le résultat “mt_cars_df_2” directement en R.\n\nggplot(mt_cars_df_2) +\n aes(x = `car name`, y = mpg, fill = hp) +\n geom_col() +\n scale_fill_gradient() +\n theme_minimal()+\n labs(x = \"C'est quoi ta bagnole ?\", y = \"Conso' de fioul !\", fill = \n        \"Nombre de chevals \\n dans l'moteur !\") +\n theme(axis.text.x = element_text(size = 8, angle = 60, hjust = 1))"
  },
  {
    "objectID": "Charte_bonnes_pratiques.html",
    "href": "Charte_bonnes_pratiques.html",
    "title": "Charte_bonnes_pratiques",
    "section": "",
    "text": "Vous trouverez cette fiche en PDF dans la COMARSSS également !\nElle est très dense, mais prenez le temps de la lire pour vous mettre à la page sur les bonnes pratiques de l’usage de R à l’ISEE."
  },
  {
    "objectID": "Fonctions_utiles.html",
    "href": "Fonctions_utiles.html",
    "title": "Fonctions utiles & exemples",
    "section": "",
    "text": "Ici, vous trouverez une liste de fonctions bien utiles dans votre usage quotidien de R. J’ai voulu rajouter des exemples pour chacune d’entre elles, et cette liste est (encore) en construction. Son but n’est évidemment pas de lister les millions de fonctions qui sont disponibles dans R, mais de servir de mémo pour les fonctions très utiles, et comment les utiliser lorsque leur usage est peu intuitif.\ncat\nLa fonction `cat` concatène et imprime les arguments fournis. En bref, elle permet d’afficher du texte ou des variables de manière concise.\n\nvarcat &lt;- 10\n\ncat(\"J'ai \", varcat, \" ans\")\n\nJ'ai  10  ans\n\n\n\nls\nLister les variables, objets, jeux de données, présents dans notre environnement de travail.\n\nls()\n\n[1] \"has_annotations\" \"varcat\""
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Introduction générale de la formation R",
    "section": "",
    "text": "Bienvenue sur mon petit site dédié à la formation sur R à l’ISEE !\nEvidemment, il existe des centaines de sites pour se former à l’usage de R, dont beaucoup sont surement mieux construits que le mien. En revanche, ce que n’ont pas ces sites, c’est la capacité à s’adapter à vous, statisticiens de l’ISEE. Ici, j’essaierai de couvrir la formation de base, puis je rajouterai du contenu en fonction de vos demandes. Nous utiliserons même les données du recensement comme jeu de données pour les exemples, afin que ça vous parle :)\nAu cours de cette formation, nous plongerons donc dans les bases de R, en commençant par la compréhension de l’environnement de travail R Studio, puis jusqu’à la manipulation de données, la création de graphiques et l’exécution d’analyses statistiques plus poussées.\n\n\n\n\n\n\n\nNoé Barthelemy - Référent R à l’ISEE (2023-2024)"
  },
  {
    "objectID": "Jeu_de_donnees_RP2019.html",
    "href": "Jeu_de_donnees_RP2019.html",
    "title": "Jeu de données d’exemple du Recensement 2019",
    "section": "",
    "text": "Pendant cette formation, nous utiliserons le jeu de données du recensement de la population de Nouvelle-Calédonie. Ainsi, les exemples vous serons parlants, et nous pourrons créer des fonctions ,figures, etc, que vous pourrez recycler plus tard !\nLe lien vers les données : ISEE - Données brutes du Recensement 2019 en OPEN DATA\nVoici ce qu’on peut lire sur le site de l’ISEE à propos des données du recensement :\nCes jeux de données anonymisées au format .csv permettent aux utilisateurs avertis un usage personnalisé des données du recensement de la population : analyses exploratoires de données ; modélisation des comportements ; tabulation sur une sous-population particulière...\n\n\nhere() starts at D:/utils/noe.barthelemy/Bureau/Formation_R_Quarto/01_code\n\n\nRows: 18353 Columns: 43\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \";\"\nchr  (7): APE, DIPL, PROV, PROVRA, PROVTRA, SECT10, SECT21\ndbl (35): ID, IDLOG, AGEA, AGER, ANNINS, CNAT, COUPLE, CPAYSN, CS24, CS42, C...\nlgl  (1): CPAYSRA\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nVoyons voir ce que ça donne pour la Province des Îles :\n\nhead(RP2019NC_OD_ind_Iles)\n\n# A tibble: 6 × 43\n     ID IDLOG  AGEA  AGER ANNINS APE    CNAT COUPLE CPAYSN CPAYSRA  CS24  CS42\n  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt; &lt;lgl&gt;   &lt;dbl&gt; &lt;dbl&gt;\n1    14 84903    34    34     NA &lt;NA&gt;     NA      1     NA NA         61    63\n2    19 24049    13    12     NA &lt;NA&gt;     NA     NA     NA NA         NA    NA\n3    82 23420     1     0     NA &lt;NA&gt;     NA     NA     NA NA         NA    NA\n4    86 21287     1     0     NA &lt;NA&gt;     NA     NA     NA NA         NA    NA\n5    99 59443    17    17     NA &lt;NA&gt;     NA      2     NA NA         NA    NA\n6   106 98101    54    54     NA &lt;NA&gt;     NA      1     NA NA         NA    NA\n# ℹ 31 more variables: CS8 &lt;dbl&gt;, CSSAL &lt;dbl&gt;, DIPL &lt;chr&gt;, EMPL &lt;dbl&gt;,\n#   EXER &lt;dbl&gt;, GAD &lt;dbl&gt;, GAQ &lt;dbl&gt;, GENRE &lt;dbl&gt;, ILN &lt;dbl&gt;, IRA &lt;dbl&gt;,\n#   MINE &lt;dbl&gt;, NAT &lt;dbl&gt;, PROV &lt;chr&gt;, PROVRA &lt;chr&gt;, PROVTRA &lt;chr&gt;, RECH &lt;dbl&gt;,\n#   SAL &lt;dbl&gt;, SCOL &lt;dbl&gt;, SECT10 &lt;chr&gt;, SECT21 &lt;chr&gt;, SECT5 &lt;dbl&gt;, STAT &lt;dbl&gt;,\n#   STATANT &lt;dbl&gt;, STM &lt;dbl&gt;, TACT &lt;dbl&gt;, TP &lt;dbl&gt;, TRAANT &lt;dbl&gt;, TRANS &lt;dbl&gt;,\n#   TYP &lt;dbl&gt;, TYPEMPL &lt;dbl&gt;, TYPMENR &lt;dbl&gt;\n\n\nOk, on dirait qu’on aura besoin d’un dictionnaire de variables. Le voici :\n\n\n\n\n\n\n\nEt voici le bulletin individuel rempli par nos concitoyens, bien généreux de nous avoir fourni toutes ces informations:\n\n\n\n\n\n\n\nVoila, on n’a plus qu’à analyser tout ça …\nAVERTISSEMENT : En application de l’arrêté du 10 septembre 2021 relatif à la diffusion des résultats du recensement de la population de Nouvelle-Calédonie de 2019, les lieux d’habitation et de travail que ces fichiers contiennent ne sont donnés qu’au niveau de localisation de la province. En outre, ces fichiers ne comportent pas les données des questions 6, 7 et 8 du bulletin individuel relatives à la communauté et à la tribu d’appartenance des personnes."
  },
  {
    "objectID": "Sommaire_cours.html",
    "href": "Sommaire_cours.html",
    "title": "Sommaire des cours",
    "section": "",
    "text": "Voici un sommaire tout à fait sommaire."
  },
  {
    "objectID": "Trouver_de_laide.html",
    "href": "Trouver_de_laide.html",
    "title": "Ou trouver de l’aide ?",
    "section": "",
    "text": "TOUS les utilisateurs de R rencontrent de temps en temps des problèmes.\nLa différence entre les bons et les moins bons se fait avec la capacité à trouver les ressources pour résoudre ce problème rapidement.\nSouvenez vous donc : Vous n’avez pas à apprendre quoi que ce soit par coeur sur R.\nIl faut simplement savoir ou chercher (et c’est vrai pour l’usage de beaucoup d’outils informatiques).\nVoici une liste de liens qui vous aideront à résoudre vos problèmes.\n\n\nLa COMARSSS !\nVous avez la chance d’avoir une communauté apprenante dédiée à l’utilisation de R au sein de l’ISEE.\nIl est très probable que vous y trouviez les réponses à vos questions, et même plus encore !\nJ’y vais !\nR Documentation officielle :\n\nSite officiel de R: La documentation officielle est une ressource essentielle pour comprendre les fonctionnalités de base de R.\n\nRStudio Community :\n\nRStudio Community: Un forum où vous pouvez poser des questions, partager des connaissances et interagir avec d’autres utilisateurs de R et RStudio.\n\nStack Overflow :\n\nR sur Stack Overflow: Une communauté active où les programmeurs posent des questions et partagent leurs connaissances.\nAssurez-vous de consulter les questions déjà posées avant de poster la vôtre.\n\nCoursera et DataCamp :\n\nCoursera - R Programming\nDataCamp - R Courses: Ces plateformes offrent des cours en ligne sur R.\nLes forums de discussion associés à ces cours peuvent être utiles pour obtenir de l’aide.\n\nGitHub :\n\nDépôt GitHub de R: Vous pouvez trouver des packages R, des scripts et des problèmes connus sur le dépôt GitHub officiel de R.\n\nCross Validated :\n\nCross Validated: Un site de questions-réponses dédié à la statistique, où vous trouverez également des questions liées à R.\n\nR-bloggers :\n\nR-bloggers: Une agrégation de blogs sur R, où vous pouvez trouver des articles, des tutoriels et des astuces.\n\nRéseaux sociaux :\n\nLes groupes et les pages liés à R sur des plateformes telles que Twitter, LinkedIn et Facebook peuvent également être des sources utiles d’information et de support.\n\n\n\nVoici également une liste de lien intéressants, collectés ça et la …\n\nUtilisation de R studio :\n\nRStudio IDE :: Cheatsheet \n23 RStudio Tips, Tricks, and Shortcuts | R-bloggers \n\nUtilisation de tidyverse :  \n\nIntroduction à R et au tidyverse - 6  Le tidyverse (juba.github.io) \nData tidying with tidyr :: Cheatsheet (rstudio.github.io) \nData transformation with dplyr :: Cheatsheet (rstudio.github.io) \n\nVisualisation de données :\n\nData visualization with ggplot2 :: Cheat Sheet (rstudio.github.io) \nTop 50 ggplot2 Visualizations - The Master List (With Full R Code) (r-statistics.co). \n9 Les graphiques avec ggplot | Exploration de données avec R (bookdown.org) \nHow to Make Beautiful Charts with R and ggplot2 - Charles Bordet \nHow to make Data Visualizations THAT GO VIRAL (with ggplot2 in R) | R-bloggers \n\nR markdown :  \n\nIntroduction to R Markdown (rstudio.com) \nrmarkdown :: Cheatsheet (rstudio.github.io) \n\n\nEt enfin, quelques “bouquins” (PDF) extrêmement intéressants pour pousser votre usage de R :\n[1] Emmanuel Paradis (12 septembre 2005) http://cran.r-project.org/doc/contrib/Paradis-rdebuts_fr.pdf\n[2] Denis Poinsot (2005). http://www.info.univ-angers.fr/~gh/tuteurs/r_pour_les_statophobes.pdf\n[3] Cornillon P.A., Guyader A., Husson F., Jégou N., Josse J., Kloareg M., Matzner-Løber E., Rouvière L. (2012) Statistique avec R. ISBN-13: 978-2753519923\n[4] Gael millot (2014) Comprendre et réaliser les tests statistiques à l’aide de R : Manuel de biostatistiques ISBN-13: 978-2804184988"
  }
]